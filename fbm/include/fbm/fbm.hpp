#pragma once
#include <vector>
namespace fbm {

//! Generate a fractional Brownian bridge in 3D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^3 uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random(nx*nx*nx)
//!          \endcode)
//!
//! @returns a (nx+1)^3 array of fractional Brownian bridge. Sides are equal to
//! zero.
std::vector<double> fractional_brownian_bridge_3d(double H, int nx,
    const std::vector<double>& X);


//! Generate a fractional Brownian bridge in 3D.
//!
//! @param[out] data_out a memory location of size (nx+1)^3
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^3 uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)*(nx+1)*(nx+1))
//!          \endcode)
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
void
fractional_brownian_bridge_3d(double* data_out, double H, int nx,
    const double* X);

//! Generate a fractional Brownian bridge in 2D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^2 uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)*(nx+1))
//!          \endcode)
//!
//! @returns a (nx+1)^2 array of fractional Brownian bridge. Sides are equal to
//! zero.
std::vector<double> fractional_brownian_bridge_2d(double H, int nx,
    const std::vector<double>& X);


//! Generate a fractional Brownian bridge in 2D.
//!
//! @param[out] data_out a memory location of size (nx+1)^2
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^2 uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)*(nx+1))
//!          \endcode)
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
void
fractional_brownian_bridge_2d(double* data_out, double H, int nx,
    const double* X);


//! Generate a fractional Brownian bridge in 1D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)s);
//!          \endcode)
//!
//! @returns a (nx+1)^3 array of fractional Brownian bridge. Sides are equal to
//! zero.
std::vector<double> fractional_brownian_bridge_1d(double H, int nx,
    const std::vector<double>& X);


//! Generate a fractional Brownian bridge in 1D.
//!
//! @param[out] data_out a memory location of size (nx+1)
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random(nx+1)
//!          \endcode)
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
void
fractional_brownian_bridge_1d(double* data_out, double H, int nx,
    const double* X);
}

#include "fbm/impl/fbm_inl.hpp"
