/* Copyright (c) 2019 Kjetil Olsen Lye, ETH Zurich
 * MIT License
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once
#include <vector>
namespace fbm {

//! Generate a fractional Brownian bridge in 3D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^3 (or nx^3 if set_sets_to_zero==false) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random(nx*nx*nx)
//!          \endcode)
//!
//! @param set_sides_to_zero by default, the sides are set to zero. If this is
//!        to false, only the corners are set to zero.
//!
//! @returns a (nx+1)^3 array of fractional Brownian bridge. Sides are equal to
//! zero.
std::vector<double> fractional_brownian_bridge_3d(double H, int nx,
    const std::vector<double>& X, bool set_sides_to_zero = true);


//! Generate a fractional Brownian bridge in 3D.
//!
//! @param[out] data_out a memory location of size (nx+1)^3
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^3 (or nx^3 if set_sets_to_zero==false) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx-1)*(nx-1)*(nx-1))
//!          \endcode)
//!
//! @param set_sides_to_zero by default, the sides are set to zero. If this is
//!        to false, only the corners are set to zero.
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
void
fractional_brownian_bridge_3d(double* data_out, double H, int nx,
    const double* X, bool set_sides_to_zero = true);

//! Generate a fractional Brownian bridge in 2D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^2 (or nx^2 if set_sets_to_zero==false) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)*(nx+1))
//!          \endcode)
//!
//! @param set_sides_to_zero by default, the sides are set to zero. If this is
//!        to false, only the corners are set to zero.
//!
//! @returns a (nx+1)^2 array of fractional Brownian bridge. Sides are equal to
//! zero.
std::vector<double> fractional_brownian_bridge_2d(double H, int nx,
    const std::vector<double>& X, bool set_sides_to_zero = true);


//! Generate a fractional Brownian bridge in 2D.
//!
//! @param[out] data_out a memory location of size (nx+1)^2
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1)^2 (or nx^2 if set_sets_to_zero==false)  uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)*(nx+1))
//!          \endcode)
//!
//! @param set_sides_to_zero by default, the sides are set to zero. If this is
//!        to false, only the corners are set to zero.
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
void
fractional_brownian_bridge_2d(double* data_out, double H, int nx,
    const double* X, bool set_sides_to_zero = true);




//! Generate a fractional Brownian bridge in 1D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)s);
//!          \endcode)
//!
//! @returns a (nx+1) array of fractional Brownian bridge. Sides are equal to
//! zero.
std::vector<double> fractional_brownian_bridge_1d(double H, int nx,
    const std::vector<double>& X);


//! Generate a fractional Brownian bridge in 1D.
//!
//! @param[out] data_out a memory location of size (nx+1)
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have (nx-1) uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random(nx-1)
//!          \endcode)
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
void
fractional_brownian_bridge_1d(double* data_out, double H, int nx,
    const double* X);



//! Generate a fractional Brownian motion in 1D.
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have nx uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random((nx+1)s);
//!          \endcode)
//!
//! @returns a (nx+1) array of fractional Brownian motion. Sides are equal to
//! zero.
//!
//! @note *EXPERIMENTAL FEATURE. CHECK SOURCE CODE AND MAKE SURE IT DOES WHAT YOU WANT*
std::vector<double> fractional_brownian_motion_1d(double H, int nx,
    const std::vector<double>& X);


//! Generate a fractional Brownian motion in 1D.
//!
//! @param[out] data_out a memory location of size (nx+1)
//!
//! @param H the Hurst index (should be between 0 and 1, non-inclusive)
//!
//! @param nx the number of cells in each direction
//!
//! @param X should have nx uniform random numbers (can be generated by say
//!          \code{.cpp}
//!          fbm::generate_normal_random(nx+1)
//!          \endcode)
//!
//! @note Prefer the version returning a vector, this is only if memory allocations
//!       are a potential performance issue.
//!
//! @note *EXPERIMENTAL FEATURE. CHECK SOURCE CODE AND MAKE SURE IT DOES WHAT YOU WANT*
void
fractional_brownian_motion_1d(double* data_out, double H, int nx,
    const double* X);
}

#include "fbm/impl/fbm_inl.hpp"
